
export namespace Exceptions {
    export class MetadataError extends Error {
        constructor(error: string) {
            super(error);
        }
    }
    export class DownloadError extends Error {
        constructor(error: string) {
            super(error);
        }
    }
    export class FileExistError extends Error {
        constructor(error: string) {
            super(error);
        }
    }
    export class InternalError extends Error {
        constructor(error: string) {
            super(error);
        }
    }

    export class GeneralError extends Error {
        public innerException: any;
        constructor(error: string, innerException: any) {
            super(error);
            this.innerException = innerException;
        }
    }
}

function getFilenameFromUrl(urlStr: string) {
    const url = new URL(urlStr, window.location.href);
    const pathname = url.pathname;
    const parts = pathname.split('/');
    return parts.pop();
}

interface DownloadFileOptions {
    progress?: (bytes: number, totalBytes?: number, precent?: number) => void;
    overrideExistingFile?: boolean;
}

export interface DownloadFileDesc {
    url: string;
    size?: number;
    fileName?: string;
}

export async function VerifyFileSize(dirHandle: FileSystemDirectoryHandle, reqFilename: string, size: number): Promise<boolean> {
    try {
        const fileHandle = await dirHandle.getFileHandle(reqFilename)
        const file = await fileHandle.getFile();
        return file.size === size;
    }
    catch (ex) {
        return false;
    }
}

export enum DownloadFileRet {
    EXIST = 1,
    DOWNLOADED = 2,
}

export async function DownloadFile(
    dirHandle: FileSystemDirectoryHandle,
    fileDesc: DownloadFileDesc,
    options: DownloadFileOptions = {}
): Promise<DownloadFileRet> {
    const filename = fileDesc.fileName === undefined ? getFilenameFromUrl(fileDesc.url) : fileDesc.fileName;
    if (filename === undefined) {
        throw new Exceptions.MetadataError("Could not determine filename.");
    }

    if (fileDesc.size !== undefined && await VerifyFileSize(dirHandle, filename, fileDesc.size)) {
        console.log(`Skip ${filename}.  Already exist with the correct size.`);
        return DownloadFileRet.EXIST;
    }

    if (options.overrideExistingFile !== true) {
        try {
            await dirHandle.getFileHandle(filename, { create: false });
            throw new Exceptions.FileExistError(`File: ${filename} does already exist.`);
        } catch (ex: unknown) {
            const domEx: DOMException = ex as DOMException;
            if (domEx.name === undefined || domEx.name !== "NotFoundError") {
                throw new Exceptions.FileExistError(`File: ${filename} does already exist. Exeption: ${domEx.message}`);
            }
        }
    }

    const abortController = new AbortController();
    const response = await fetch(fileDesc.url, { signal: abortController.signal });
    if (!response.ok) {
        throw new Exceptions.DownloadError(`Error while downloading: ${response.status} - ${response.statusText}`);
    }
    if (response.body === null) {
        throw new Exceptions.DownloadError(`No data`);
    }
    let responseStream = response.body;
    if (options.progress !== undefined) {
        let loadedBytes = 0;
        const totalBytesStr = response.headers.get("content-length");
        const totalBytes = Number.parseInt(totalBytesStr ?? '') || undefined;
        const progress = new TransformStream(
            {
                transform(chunk, controller) {
                    loadedBytes += chunk.length;
                    let precent = totalBytes !== undefined ? loadedBytes / totalBytes : undefined;
                    if (options.progress === undefined) {
                        return;
                    }
                    options.progress(loadedBytes, totalBytes, precent);
                    controller.enqueue(chunk);
                }
            }
        );
        responseStream = responseStream.pipeThrough(progress);
    }

    try {
        const fileHandle = await dirHandle.getFileHandle(filename, { create: true });
        const writeable = await fileHandle.createWritable();
        await responseStream.pipeTo(writeable);
    } catch (ex: any) {
        // Abort possible pending request. (e.g. no permissions to create file, ...)
        abortController.abort();
        throw new Exceptions.GeneralError(`Download of file ${filename} failed due to an exception: ${ex?.message}`, ex);
    }

    return DownloadFileRet.DOWNLOADED;
}


export interface ProgressState {
    // Taken from content-length header
    totalBytes?: number;
    // Only available, when content-length header is set
    percent?: number;
    // Bytes downloaded
    bytes: number;
}

export enum FileState {
    STARTED,
    COMPLETED,
    EXIST,
    ERROR
}

export type DlFilesOnStateChange = (url : string, update: { progress?: ProgressState, error?: Error, state?: FileState} ) => void;

export interface DownloadFilesOptions {
    overrideExistingFile?: boolean;
    abortSignal?: AbortSignal;
    onStateUpdate?: DlFilesOnStateChange;
}


export async function DownloadFiles(dirHandle: FileSystemDirectoryHandle, files:DownloadFileDesc[], options? : DownloadFilesOptions) {
    if(options === undefined)
    {
        options = {};
    }
    const internalAbort = new AbortController();
    const abortController = options.abortSignal === undefined ? internalAbort.signal : options.abortSignal;
    /// \todo use parallel tasks? https://github.com/SGrondin/bottleneck#-using-asyncawait
    for(const dlFile of files)
    {
        if(abortController.aborted)
        {
            break;
        }
        const progressCallback = options.onStateUpdate === undefined ? undefined : (bytes: number, totalBytes?:number, percent? : number) => {
            options?.onStateUpdate?.(dlFile.url, {
                progress: {
                    bytes: bytes,
                    totalBytes: totalBytes,
                    percent: percent
                }
            });
        }
        const dlOpt : DownloadFileOptions =  {
            overrideExistingFile: options.overrideExistingFile,
            progress : progressCallback,
        }
        options?.onStateUpdate?.(dlFile.url, {
            state: FileState.STARTED
        });
        try{
            /// \todo Forward abortController
            const ret = await DownloadFile(dirHandle, dlFile, dlOpt);
            switch(ret){
                case DownloadFileRet.DOWNLOADED: 
                    options?.onStateUpdate?.(dlFile.url, {
                        state: FileState.COMPLETED
                    });
                    break;
                case DownloadFileRet.EXIST:
                    options?.onStateUpdate?.(dlFile.url, {
                        state: FileState.EXIST
                    });
                    break;
                default:
                    // Should never happen
                    throw new Exceptions.InternalError(`Unknown return value from download function: ${ret} `);
            }

        }catch(ex: unknown)
        {
            const exError = ex as Error;
            options?.onStateUpdate?.(dlFile.url, {
                state: FileState.ERROR,
                error: exError
            });
        }
    }
}
